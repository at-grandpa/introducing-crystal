# `"` で囲む形式
"Hello Crystal World!"
"\e[31mred string\e[0m" # エスケープシーケンスも使えます

# 文字列は `String` 型です
typeof("foo") # => String

# エスケープシーケンス `\u` は複数の文字コードを指定できます
"\u{48 45 4C 4C 4F}" # => "HELLO"

"\
  改行を\
  含める
  こともできます\
"
# => "改行を含める\n  こともできます"

# `#{}` による文字列の補間ができます
"#{1 + 1} == 2" # => "2 == 2"

# `%` 形式の文字列
%((括弧) の場合は((ネスト)可能))
%(hello (world)) # `(` で始めた場合は `)` で閉じる
%[hello [world]] # `[` で始めた場合は `]` で閉じる
%<hello <world>> # `<` で始めた場合は `>` で閉じる
%{hello {world}} # `{` で始めた場合は `}` で閉じる
%|hello world|   # その他の文字の場合は、その文字で閉じる

# `%q` の場合は、文字列の補間とエスケープシーケンスが適用されません
%q[¯\_(ツ)_/¯] # => "¯\\_(ツ)_/¯"

%Q(%(...)と全く同じです)

# ヒアドキュメントは `<<-EOS` という形式になります
<<-EOS
foo
bar
補間やエスケープシーケンス\nも使えます
#{1 + 1} == 2
EOS
# => "foo\nbar\n補間やエスケープシーケンス\nも使えます\n2 == 2"
# 最後の行には改行がつかないことに注意してください

# 続けてメソッドを呼ぶこともできます
<<-FOO_BAR
foo
bar
FOO_BAR.upcase
# => "FOO\nBAR"

# インデントは開始位置を基準として削除されます
begin
  <<-FOO_BAR
  foo
    bar
  baz
  FOO_BAR
end
# => "foo\n  bar\nbaz"

# ヒアドキュメントの区切り文字が `'` の場合は
# 補間やエスケープシーケンスが使えなくなります
<<-'EOS'
#{¯\_(ツ)_/¯}
EOS
# => "\#{¯\\_(ツ)_/¯}"
